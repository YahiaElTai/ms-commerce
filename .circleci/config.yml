version: 2.1

orbs:
  node: circleci/node@5.1.0
  gcp-cli: circleci/gcp-cli@3.0.1
  gcp-gcr: circleci/gcp-gcr@0.15.0
  shellcheck: circleci/shellcheck@3.1.2
  helm: circleci/helm@2.0.1
  dotenv: anilanar/dotenv@1.0.0
  terraform: circleci/terraform@3.2.1

executors:
  gcp-executor:
    docker:
      - image: cimg/gcp:2023.04
  node-executor:
    docker:
      - image: cimg/node:20.0.0
  base-executor:
    docker:
      - image: cimg/base:2023.05

commands:
  install-pnpm:
    description: Install pnpm via corepack
    steps:
      - restore_cache:
          name: Restore pnpm cache
          keys:
            - pnpm-packages-{{ checksum "pnpm-lock.yaml" }}
      - run:
          name: Install pnpm via corepack
          command: |
            sudo corepack enable
            sudo corepack prepare --activate
      - run:
          name: Install dependencies
          command: |
            pnpm install
      - save_cache:
          name: Save pnpm cache
          key: pnpm-packages-{{ checksum "pnpm-lock.yaml" }}
          paths:
            - node_modules
  setup_environment_variables:
    description: Setup env variables for environment
    parameters:
      environment_name:
        type: enum
        enum: ['gcp-production-eu', 'gcp-staging-eu']
      environment_variable_name:
        type: string
    steps:
      - dotenv/source:
          path: .circleci/.env.<< parameters.environment_name >>
      - run:
          name: 'Setup env variables for << parameters.environment_name >>'
          command: |
            set -e

            ENVIRONMENT_VARIABLE_NAME=<< parameters.environment_variable_name >>

            if [[ "$ENVIRONMENT_VARIABLE_NAME" == "GCP_JSON_KEY_ENV_VAR_NAME" ]]; then
                GCLOUD_SERVICE_KEY_JSON="${!GCP_JSON_KEY_ENV_VAR_NAME}"

                echo "GCLOUD_SERVICE_KEY=$GCLOUD_SERVICE_KEY_JSON" >>".circleci/.env.$ENVIRONMENT_NAME"

                echo -e "\033[32mExported GCLOUD_SERVICE_KEY for enviroment $ENVIRONMENT_NAME"
            fi

            if [[ "$ENVIRONMENT_VARIABLE_NAME" == "TERRAFORM_JSON_KEY_ENV_VAR_NAME" ]]; then
                TERRAFORM_SERVICE_KEY_JSON="${!TERRAFORM_JSON_KEY_ENV_VAR_NAME}"

                echo "$TERRAFORM_SERVICE_KEY_JSON" >>"$HOME"/terraform-service-key.json

                echo "$TERRAFORM_SERVICE_KEY_JSON"
                cat "$HOME"/terraform-service-key.json

                cat .circleci/.env."$ENVIRONMENT_NAME"
                echo "GOOGLE_APPLICATION_CREDENTIALS=\"$HOME/terraform-service-key.json\"" >>".circleci/.env.$ENVIRONMENT_NAME"

                echo -e "\033[32mExported GOOGLE_APPLICATION_CREDENTIALS for enviroment $ENVIRONMENT_NAME"

                cat .circleci/.env."$ENVIRONMENT_NAME"
            fi
      - dotenv/source:
          path: .circleci/.env.<< parameters.environment_name >>

jobs:
  typecheck_test:
    working_directory: ~/ms-commerce/services/<< parameters.app-dir >>
    executor: node-executor
    resource_class: large
    parameters:
      app-dir:
        type: string
    steps:
      - checkout:
          path: ~/ms-commerce
      - run:
          name: Install missing dependencies for mongodb-memory-server
          command: |
            wget http://archive.ubuntu.com/ubuntu/pool/main/o/openssl/libssl1.1_1.1.1f-1ubuntu2_amd64.deb
            sudo dpkg -i libssl1.1_1.1.1f-1ubuntu2_amd64.deb
      - install-pnpm
      - run:
          command: pnpm exec prisma generate --schema=src/prisma/schema.prisma
          name: Generate Prisma client
      - run:
          name: Lint << parameters.app-dir >> service
          command: pnpm lint
      - run:
          command: pnpm typecheck
          name: Typecheck services/<< parameters.app-dir >>
      - run:
          command: pnpm test:ci
          name: Run tests ./services/<< parameters.app-dir >>
  build-and-push-image:
    executor: gcp-gcr/default
    resource_class: large
    parameters:
      environment_name:
        type: string
      service:
        type: string
    steps:
      - checkout
      - setup_environment_variables:
          environment_name: << parameters.environment_name >>
          environment_variable_name: GCP_JSON_KEY_ENV_VAR_NAME
      - gcp-gcr/gcr-auth:
          registry-url: $REGISTRY_URL
      - gcp-gcr/build-image:
          registry-url: $REGISTRY_URL
          image: $REPO_NAME/<< parameters.service >>
          tag: << pipeline.git.revision >>
          docker-context: ./services/<< parameters.service >>
          path: ./services/<< parameters.service >>
      - gcp-gcr/push-image:
          registry-url: $REGISTRY_URL
          image: $REPO_NAME/<< parameters.service >>
          tag: << pipeline.git.revision >>
  deploy_service:
    executor: gcp-executor
    resource_class: large
    parameters:
      environment_name:
        type: string
      chart_name:
        type: string
      helm_release_name:
        type: string
    steps:
      - checkout
      - helm/install-helm-client
      - setup_environment_variables:
          environment_name: << parameters.environment_name >>
          environment_variable_name: GCP_JSON_KEY_ENV_VAR_NAME
      - gcp-cli/setup:
          components: 'gke-gcloud-auth-plugin --quiet'
      - run:
          name: Deploying << parameters.chart_name >>
          command: ./.circleci/deploy_service.sh
          environment:
            ENVIRONMENT_NAME: << parameters.environment_name >>
            CHART_NAME: << parameters.chart_name >>
            HELM_RELEASE_NAME: << parameters.helm_release_name >>
            GIT_REVISION: << pipeline.git.revision >>
  terraform_plan:
    executor: base-executor
    parameters:
      environment_name:
        type: string
    steps:
      - checkout
      - run:
          name: Install Terraform
          command: ./.circleci/terraform_install.sh
      - setup_environment_variables:
          environment_name: << parameters.environment_name >>
          environment_variable_name: TERRAFORM_JSON_KEY_ENV_VAR_NAME
      - run:
          name: show env file
          command: cat .circleci/.env.<< parameters.environment_name >>
      - run:
          name: Check GOOGLE_APPLICATION_CREDENTIALS
          command: echo "$GOOGLE_APPLICATION_CREDENTIALS"
      - run:
          name: Check REPO_NAME
          command: echo "$REPO_NAME"
      - run:
          name: Check JSON key file content
          command: cat "$GOOGLE_APPLICATION_CREDENTIALS"
      - terraform/init:
          backend_config_file: ./environments/<< parameters.environment_name >>.hcl
          path: ./infra/terraform
      - terraform/fmt:
          path: ./infra/terraform
      - terraform/validate:
          path: ./infra/terraform
      - terraform/plan:
          backend_config_file: ./environments/<< parameters.environment_name >>.hcl
          path: ./infra/terraform
          var_file: ./environments/<< parameters.environment_name >>.tfvars
  terraform_apply:
    executor: base-executor
    parameters:
      environment_name:
        type: string
    steps:
      - checkout
      - run:
          name: Install Terraform
          command: ./.circleci/terraform_install.sh
      - setup_environment_variables:
          environment_name: << parameters.environment_name >>
          environment_variable_name: TERRAFORM_JSON_KEY_ENV_VAR_NAME
      - terraform/init:
          backend_config_file: ./environments/<< parameters.environment_name >>.hcl
          path: ./infra/terraform
      - terraform/apply:
          backend_config_file: ./environments/<< parameters.environment_name >>.hcl
          path: ./infra/terraform
          var_file: ./environments/<< parameters.environment_name >>.tfvars

workflows:
  test_branch:
    when:
      not:
        matches:
          pattern: '^main$'
          value: << pipeline.git.branch >>
    jobs:
      - shellcheck/check:
          name: shell_check
          dir: ./.circleci
      - typecheck_test:
          name: typecheck_test_cart
          app-dir: cart
          requires:
            - shell_check
      - typecheck_test:
          name: typecheck_test_account
          app-dir: account
          requires:
            - shell_check
      - typecheck_test:
          name: typecheck_test_product
          app-dir: product
          requires:
            - shell_check
      - terraform_plan:
          name: terraform_plan_staging
          environment_name: gcp-staging-eu
      - can_terraform_apply:
          name: can_terraform_apply_staging
          type: approval
          requires:
            - terraform_plan_staging
      - terraform_apply:
          name: terraform_apply_staging
          environment_name: gcp-staging-eu
          requires:
            - can_terraform_apply_staging
  test_and_deploy:
    when:
      equal: [main, << pipeline.git.branch >>]
    jobs:
      - shellcheck/check:
          name: shell_check
          dir: ./.circleci
      # Cart service jobs (staging)
      - typecheck_test:
          name: typecheck_test_cart
          app-dir: cart
          requires:
            - shell_check
      - build-and-push-image:
          name: b_p_s_cart_image
          environment_name: gcp-staging-eu
          service: cart
          requires:
            - typecheck_test_cart
      - deploy_service:
          name: deploy_s_cart_service
          environment_name: gcp-staging-eu
          chart_name: ms-cart
          helm_release_name: ms-cart
          requires:
            - b_p_s_cart_image
      # Cart service jobs (production)
      - can_deploy_service:
          name: can_deploy_p_cart_service
          type: approval
          requires:
            - typecheck_test_cart
      - build-and-push-image:
          name: b_p_prod_cart_image
          environment_name: gcp-production-eu
          service: cart
          requires:
            - can_deploy_p_cart_service
      - deploy_service:
          name: deploy_prod_cart_service
          environment_name: gcp-production-eu
          chart_name: ms-cart
          helm_release_name: ms-cart
          requires:
            - b_p_prod_cart_image
      # Account service jobs (staging)
      - typecheck_test:
          name: typecheck_test_account
          app-dir: account
          requires:
            - shell_check
      - build-and-push-image:
          name: b_p_s_account_image
          environment_name: gcp-staging-eu
          service: account
          requires:
            - typecheck_test_account
      - deploy_service:
          name: deploy_s_account_service
          environment_name: gcp-staging-eu
          chart_name: ms-account
          helm_release_name: ms-account
          requires:
            - b_p_s_account_image
      # Account service jobs (production)
      - can_deploy_service:
          name: can_deploy_p_account_service
          type: approval
          requires:
            - typecheck_test_account
      - build-and-push-image:
          name: b_p_prod_account_image
          environment_name: gcp-production-eu
          service: account
          requires:
            - can_deploy_p_account_service
      - deploy_service:
          name: deploy_prod_account_service
          environment_name: gcp-production-eu
          chart_name: ms-account
          helm_release_name: ms-account
          requires:
            - b_p_prod_account_image
      # Product service jobs (staging)
      - typecheck_test:
          name: typecheck_test_product
          app-dir: product
          requires:
            - shell_check
      - build-and-push-image:
          name: b_p_s_product_image
          environment_name: gcp-staging-eu
          service: product
          requires:
            - typecheck_test_product
      - deploy_service:
          name: deploy_s_product_service
          environment_name: gcp-staging-eu
          chart_name: ms-product
          helm_release_name: ms-product
          requires:
            - b_p_s_product_image
      # Product service jobs (production)
      - can_deploy_service:
          name: can_deploy_p_product_service
          type: approval
          requires:
            - typecheck_test_product
      - build-and-push-image:
          name: b_p_prod_product_image
          environment_name: gcp-production-eu
          service: product
          requires:
            - can_deploy_p_product_service
      - deploy_service:
          name: deploy_prod_product_service
          environment_name: gcp-production-eu
          chart_name: ms-product
          helm_release_name: ms-product
          requires:
            - b_p_prod_product_image
      # Ingress (optional) jobs (staging)
      - can_deploy_service:
          name: can_deploy_s_ingress
          type: approval
          requires:
            - shell_check
      - deploy_service:
          name: deploy_s_ingress
          environment_name: gcp-staging-eu
          chart_name: ms-ingress
          helm_release_name: ms-ingress
          requires:
            - can_deploy_s_ingress
      # Ingress (optional) jobs (staging)
      - can_deploy_service:
          name: can_deploy_p_ingress
          type: approval
          requires:
            - shell_check
      - deploy_service:
          name: deploy_prod_ingress
          environment_name: gcp-production-eu
          chart_name: ms-ingress
          helm_release_name: ms-ingress
          requires:
            - can_deploy_p_ingress
