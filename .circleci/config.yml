version: 2.1

orbs:
  node: circleci/node@5.1.0
  gcp-cli: circleci/gcp-cli@3.0.1
  gcp-gcr: circleci/gcp-gcr@0.15.0
  shellcheck: circleci/shellcheck@3.1.2
  helm: circleci/helm@2.0.1

executors:
  gcp-executor:
    docker:
      - image: cimg/gcp:2023.04
  node-executor:
    docker:
      - image: cimg/node:20.0.0

commands:
  install-pnpm:
    description: Install pnpm via corepack
    steps:
      - restore_cache:
          name: Restore pnpm cache
          keys:
            - pnpm-packages-{{ checksum "pnpm-lock.yaml" }}
      - run:
          name: Install pnpm via corepack
          command: |
            sudo corepack enable
            sudo corepack prepare --activate
      - run:
          name: Install dependencies
          command: |
            pnpm install
      - save_cache:
          name: Save pnpm cache
          key: pnpm-packages-{{ checksum "pnpm-lock.yaml" }}
          paths:
            - node_modules

jobs:
  typecheck_test:
    working_directory: ~/ms-commerce/services/<< parameters.app-dir >>
    executor: node-executor
    resource_class: large
    parameters:
      app-dir:
        type: string
    steps:
      - checkout:
          path: ~/ms-commerce
      - run:
          name: Install missing dependencies for mongodb-memory-server
          command: |
            wget http://archive.ubuntu.com/ubuntu/pool/main/o/openssl/libssl1.1_1.1.1f-1ubuntu2_amd64.deb
            sudo dpkg -i libssl1.1_1.1.1f-1ubuntu2_amd64.deb
      - install-pnpm
      - run:
          command: pnpm exec prisma generate --schema=src/prisma/schema.prisma
          name: Generate Prisma client
      - run:
          name: Lint << parameters.app-dir >> service
          command: pnpm lint
      - run:
          command: pnpm typecheck
          name: Typecheck services/<< parameters.app-dir >>
      - run:
          command: pnpm test:ci
          name: Run tests ./services/<< parameters.app-dir >>
  deploy_service:
    executor: gcp-executor
    resource_class: large
    parameters:
      chart_name:
        type: string
      helm_release_name:
        type: string
    steps:
      - checkout
      - helm/install-helm-client
      - gcp-cli/setup:
          components: 'gke-gcloud-auth-plugin --quiet'
      - run:
          name: Deploying << parameters.chart_name >>
          command: ./.circleci/deploy_service.sh
          environment:
            CHART_NAME: << parameters.chart_name >>
            HELM_RELEASE_NAME: << parameters.helm_release_name >>
            GIT_REVISION: << pipeline.git.revision >>
workflows:
  test_branch:
    when:
      not:
        matches:
          pattern: '^main$'
          value: << pipeline.git.branch >>
    jobs:
      - shellcheck/check:
          name: shell_check
          dir: ./.circleci
      - typecheck_test:
          name: typecheck_test_cart
          app-dir: cart
          requires:
            - shell_check
      - typecheck_test:
          name: typecheck_test_account
          app-dir: account
          requires:
            - shell_check
      - typecheck_test:
          name: typecheck_test_product
          app-dir: product
          requires:
            - shell_check
  test_and_deploy:
    when:
      equal: [main, << pipeline.git.branch >>]
    jobs:
      - shellcheck/check:
          name: shell_check
          dir: ./.circleci
          # Cart service jobs
      - typecheck_test:
          name: typecheck_test_cart
          app-dir: cart
          requires:
            - shell_check
      - gcp-gcr/build-and-push-image:
          name: b_p_cart_image
          docker-context: ./services/cart
          image: $REPO_NAME/cart
          path: ./services/cart
          registry-url: $REGISTRY_URL
          tag: << pipeline.git.revision >>
          requires:
            - typecheck_test_cart
      - can_deploy_service:
          name: can_deploy_cart_service
          type: approval
          requires:
            - b_p_cart_image
      - deploy_service:
          name: deploy_cart_service
          chart_name: ms-cart
          helm_release_name: ms-cart
          requires:
            - can_deploy_cart_service
          # account service jobs
      - typecheck_test:
          name: typecheck_test_account
          app-dir: account
          requires:
            - shell_check
      - gcp-gcr/build-and-push-image:
          name: b_p_account_image
          docker-context: ./services/account
          image: $REPO_NAME/account
          path: ./services/account
          registry-url: $REGISTRY_URL
          tag: << pipeline.git.revision >>
          requires:
            - typecheck_test_account
      - can_deploy_service:
          name: can_deploy_account_service
          type: approval
          requires:
            - b_p_account_image
      - deploy_service:
          name: deploy_account_service
          chart_name: ms-account
          helm_release_name: ms-account
          requires:
            - can_deploy_account_service
              # Product service jobs
      - typecheck_test:
          name: typecheck_test_product
          app-dir: product
          requires:
            - shell_check
      - gcp-gcr/build-and-push-image:
          name: b_p_product_image
          docker-context: ./services/product
          image: $REPO_NAME/product
          path: ./services/product
          registry-url: $REGISTRY_URL
          tag: << pipeline.git.revision >>
          requires:
            - typecheck_test_product
      - can_deploy_service:
          name: can_deploy_product_service
          type: approval
          requires:
            - b_p_product_image
      - deploy_service:
          name: deploy_product_service
          chart_name: ms-product
          helm_release_name: ms-product
          requires:
            - can_deploy_product_service
          # Ingress (optional) deployment job
      - can_deploy_service:
          name: can_deploy_ingress
          type: approval
          requires:
            - shell_check
      - deploy_service:
          name: deploy_ingress
          chart_name: ms-ingress
          helm_release_name: ms-ingress
          requires:
            - can_deploy_ingress
