generator client {
  provider = "prisma-client-js"
}

// generator dbml {
//   provider = "prisma-dbml-generator"
// }

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum Currency {
  EUR
  USD
  GBP
}

model Price {
  id             Int      @id @default(autoincrement())
  centAmount     Int
  currencyCode   Currency @default(EUR)
  fractionDigits Int      @default(2)
  variant        Variant  @relation(fields: [variantId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  variantId      Int      @unique
}

model Variant {
  id        Int      @id @default(autoincrement())
  sku       String   @unique
  price     Price?
  product   Product? @relation(fields: [productId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  productId Int?
}

model Product {
  id          Int       @id @default(autoincrement())
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  name        String
  description String?
  productKey  String?
  variants    Variant[]
  version     Int       @default(1)
}

// Workflow 
// create a product. First variant must be created with the product. (This will be an event from the product service)
// Price must be created with each variant.
// More variants can be added later, with their own prices. (These will be events from the product service)
// Variants can be added to the cart as line item with a unique identifier "SKU"

model LineItem {
  id       Int    @id @default(autoincrement())
  quantity Int    @default(1)
  sku      String
  cart     Cart?  @relation(fields: [cartId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  cartId   Int?
  // In the Database, line items will contain only id and quantity but computed fields will be added
  // computed fields include: variant (object), price, totalPrice, name (product name), productKey, sku
  // price is the exact price from the variant
  // totalPrice is the price * the quantity
}

model Cart {
  id            Int        @id @default(autoincrement())
  createdAt     DateTime   @default(now())
  updatedAt     DateTime   @updatedAt
  // This current must match with the currency of the price on the variant of the line item.
  currency      Currency
  customerEmail String?
  lineItems     LineItem[]
  version       Int        @default(1)
  // computed fields for carts: totalLineItemQuantity, totalPrice
  // totalLineItemQuantity is the sum of all line item quantities
  // totalPrice is the sum of all totalPrice from line items
}
